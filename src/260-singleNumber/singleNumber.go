// Q:
// 给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。
// 示例 :
// 输入: [1,2,1,3,2,5]
// 输出: [3,5]

// 思路：
// 一个数组所有元素出现两次，只有一个出现一次，思路就是直接异或
// 同理一个数组所有元素出现两次，有两个出现一次，先进行全数组的异或操作。最后的结果就是这两个出现一次的数字的异或后的结果
// 这个结果一定不为0（因为为0两个数字就相同了）可以通过这个结果，找任意一位二进制1出现的位置。因为无论哪个位置出现1，都代表了这两个数字二进制中不同的那一位置。
// 通过这个1，将原数组区分成为两组。两组分别异或，就能得到这两个数字。
func singleNumber(nums []int) []int {
    xor := 0
    for _, v := range nums {
        xor ^= v
    }
    result1, result2 := 0, 0
    var k uint = 0
    for {
        if ((xor >> k) & 1) == 1 {
            break
        } else {
            k++
        }
    }
    
    for _, v := range nums {
        if ((v >> k) & 1) == 1 {
            result1 ^= v
        } else {
            result2 ^= v
        }
    }
    return []int{result1, result2}
}