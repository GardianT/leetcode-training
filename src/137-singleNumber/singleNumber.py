# Q:
# 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。
# 说明：
# 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
# 示例 1:
# 输入: [2,2,3,2]
# 输出: 3
# 示例 2:
# 输入: [0,1,0,1,0,1,99]
# 输出: 99

# 思路：每个出现二次，找出现一次的 -> 按位统计2次，最后所有位除2拿余数。可以用异或来做
# 每个出现三次，找出现一次的 -> 与上面同理，可以实现三次的异或。
# 每个出现三次，找两个出现一次的 -> 同理。只不过这样最后拿余数的时候，有的可能是2，有的可能是1
# 随便找一个出现1的位。按照这个位，把所有数分为两组。然后两组中分别找出现一次的。
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        a, b = 0, 0
        for num in nums:
            b = ~a & (b ^ num)
            a = ~b & (a ^ num)
        return b