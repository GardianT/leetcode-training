// Q:
// 一条包含字母 A-Z 的消息通过以下方式进行了编码：
// 'A' -> 1
// 'B' -> 2
// ...
// 'Z' -> 26
// 给定一个只包含数字的非空字符串，请计算解码方法的总数。
// 示例 1:
// 输入: "12"
// 输出: 2
// 解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
// 示例 2:
// 输入: "226"
// 输出: 3
// 解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

// 思路：动态规划。
// f(n) = f(n - 1) if 当前位和前一位不能组成新编码
//      = f(n - 1) + f(n - 2) if 当前位和前一位能组成新编码
// 本质就是变形的跳台阶问题。
func numDecodings(s string) int {
    dp := []int{1, 1}
    for i, v := range s {
        res := dp[len(dp) - 1]
        if v == '0' {
            res = 0
        }
        if i > 0 && (s[i - 1] == '1' || (v <= '6' && s[i-1] == '2')) {
            res += dp[len(dp) - 2]
        }
        dp = append(dp, res)
    }
    return dp[len(dp) - 1]
}